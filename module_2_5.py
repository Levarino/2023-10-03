                                     # Шпаргалка для понимания

def get_matrix(n, m, value):         # {def-функция} Объявите функцию get_matrix и напишите в ней параметры n, m и value
    matrix = []                      # {Список} Создайте пустой список matrix внутри функции get_matrix
    for i in range(n):               # {for-цикл} Напишите первый(внешний) цикл for для кол-ва строк матрицы, n повторов {range (класс , остановка[, шаг])}
        neo = []                     # {Список} В первом цикле добавляйте пустой список в список matrix
        matrix.append(neo)           # {Метод} Добавление пустого списка в список matrix с помощью .append () добавляет в конец списка элемент, переданный ему в качестве аргумента
        for j in range(m):           # {for-цикл} Напишите второй(внутренний) цикл for для кол-ва столбцов матрицы, m повторов {range-диапазон}
            neo.append(value)        # {Метод .append} Во втором цикле пополняйте ранее добавленный пустой список значениями value
    return matrix                    # После всех циклов верните значение переменной matrix
                                     # {Оператор return} не только завершает выполнение функции, но и передаёт значение обратно в вызывающий код.

result1 = get_matrix(2, 2, 10)       # Вложенный список - это строка матрицы, элементы вложенных списков(глубже) - это столбцы матрицы
result2 = get_matrix(3, 5, 42)       # В случае передачи аргумента со значением 0 или меньше, будет возвращаться пустой список
result3 = get_matrix(4, 2, 13)
print(result1)
print(result2)
print(result3)